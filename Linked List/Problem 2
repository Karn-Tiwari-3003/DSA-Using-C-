/*
The best way to master Linked list is to start with basics. Let's solve one such basic question. Given a linked list you 
have to print the middle element. Finding a middle element in an array is a matter of accessing an element using its index 
but in this case, you might have to do some linked list traversal. 
If number of elements in the list is odd then print the only mid element, else in case of even number of elements print the second 
mid element.
*/

#include <bits/stdc++.h>
using namespace std;

class Node{
  public:
  int data;
  Node* next;
};

void printMiddle(Node* head){
    Node* slow = head;
    Node* fast = head;
    if(head != NULL){
        while(fast != NULL && fast->next != NULL){
            fast = fast->next->next;
            slow = slow->next;
        }
    }
    cout << slow->data << endl;
}

void append(Node** head_ref, int new_data){
    Node* new_node = new Node();
    new_node->data = new_data;
    new_node->next = NULL;
    if(*head_ref == NULL){
        *head_ref = new_node;
        return;
    }
    Node* last = new Node();
    last = *head_ref;
    while(last->next != NULL){
        last = last->next;
    }
    last->next = new_node;
    return;
}

int main()
{
  //write your code here
  int t;
  cin >> t;
  while(t--){
    int n;
    cin >> n;
    Node* head = NULL;
    while(n--){
      int x;
      cin >> x;
      append(&head, x);
    }
    printMiddle(head);
  }
  return 0;
}
