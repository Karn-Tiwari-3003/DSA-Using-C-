/*
Many Linked List problems are about manipulating links between the nodes, better you understand the links easier it becomes for 
you to solve Linked List problems.
Keeping that in mind, you are given a linked list containing N elements, your task is to bring the last node to the front. 
*/

#include <bits/stdc++.h>
using namespace std;

class Node{
  public:
  int data;
  Node* next;
};

void printFront(Node** head){
    Node* last = *head;
    Node* second_last = NULL;
    if(last != NULL && last->next != NULL){
        while(last->next != NULL){
            second_last = last;
            last = last->next;
        }
        second_last->next = NULL;
        last->next = *head;
        *head = last;
    }
}

void print(Node** head){
    Node* temp = *head;
    if(temp != NULL){
        while(temp != NULL){
            cout << temp->data << " ";
            temp = temp->next;
        }
    }
    cout << endl;
}

void append(Node** head_ref, int new_data){
    Node* new_node = new Node();
    new_node->data = new_data;
    new_node->next = NULL;
    if(*head_ref == NULL){
        *head_ref = new_node;
        return;
    }
    Node* last = new Node();
    last = *head_ref;
    while(last->next != NULL){
        last = last->next;
    }
    last->next = new_node;
    return;
}

int main()
{
  //write your code here
  int t;
  cin >> t;
  while(t--){
    int n;
    cin >> n;
    Node* head = NULL;
    while(n--){
      int x;
      cin >> x;
      append(&head, x);
    }
    printFront(&head);
    print(&head);
  }
  return 0;
}
